plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id("com.apollographql.apollo").version("2.5.11")

}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.challenge"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //apollo
    implementation("com.apollographql.apollo:apollo-runtime:2.5.11")

    // optional: if you want to use the normalized cache
    implementation("com.apollographql.apollo:apollo-normalized-cache-sqlite:2.5.11")
    // optional: for coroutines support
    implementation("com.apollographql.apollo:apollo-coroutines-support:2.5.11")
    // optional: for Mutiny support
    implementation("com.apollographql.apollo:apollo-mutiny-support:2.5.11")
    // optional: for Reactor support
    implementation("com.apollographql.apollo:apollo-reactor-support:2.5.11")
    // optional: for RxJava3 support
    implementation("com.apollographql.apollo:apollo-rx3-support:2.5.11")
    // optional: Most of apollo-android does not depend on Android in practice and runs on any JVM or on Kotlin native. apollo-android-support contains a few Android-only helper classes. For an example to send logs to logcat or run callbacks on the main thread.
    implementation("com.apollographql.apollo:apollo-android-support:2.5.11")
    // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime
    // and use apollo-api instead
    implementation("com.apollographql.apollo:apollo-api:2.5.11")

}